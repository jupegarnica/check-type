"use strict";var _index=_interopRequireWildcard(require("./index"));function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap;_getRequireWildcardCache=function(){return cache};return cache}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj}}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}describe("check strings",()=>{test("check with constructor",()=>{expect(()=>{(0,_index.default)(String)("a string")}).not.toThrow();expect(()=>{(0,_index.default)(String)("")}).not.toThrow();expect(()=>{(0,_index.default)(String)("")}).not.toThrow();expect(()=>{(0,_index.default)(String)(``)}).not.toThrow();expect(()=>{(0,_index.default)(Number)("a string")}).toThrow()});test("check with primitives",()=>{expect(()=>{(0,_index.default)("a string")("a string")}).not.toThrow();expect(()=>{(0,_index.default)("a string")("a string")}).not.toThrow();expect(()=>{(0,_index.default)("not")("a string")}).toThrow()});test("check with Regex",()=>{expect(()=>{(0,_index.default)(/string/)("a string")}).not.toThrow();expect(()=>{(0,_index.default)(/(string)$/)("a string")}).not.toThrow();expect(()=>{(0,_index.default)(/^(string)/)("a string")}).toThrow()});test("check with custom validator",()=>{expect(()=>{(0,_index.default)(val=>val.length===8)("a string")}).not.toThrow();expect(()=>{(0,_index.default)(val=>val.includes("str"))("a string")}).not.toThrow()})});describe("check numbers",()=>{test("check with constructor",()=>{expect(()=>{(0,_index.default)(String)(33)}).toThrow();expect(()=>{(0,_index.default)(Number)(33)}).not.toThrow();expect(()=>{(0,_index.default)(Number)(NaN)}).not.toThrow();expect(()=>{(0,_index.default)(Number)(Infinity)}).not.toThrow();expect(()=>{(0,_index.default)(Number.isNaN)(NaN)}).not.toThrow();expect(()=>{(0,_index.default)(Number.isNaN)(1)}).toThrow()});test("check with custom validator",()=>{expect(()=>{(0,_index.default)(val=>val>0)(33)}).not.toThrow();expect(()=>{(0,_index.default)(val=>val<0)(33)}).toThrow()})});describe("check with enums",()=>{test("optional",()=>{expect(()=>{(0,_index.default)([undefined,0])(undefined)}).not.toThrow();expect(()=>{(0,_index.default)([undefined,0])(0)}).not.toThrow();expect(()=>{(0,_index.default)([undefined,0])(null)}).toThrow()});test("constructors",()=>{expect(()=>{(0,_index.default)([String,Number])("12")}).not.toThrow();expect(()=>{(0,_index.default)([String,Number])(12)}).not.toThrow();expect(()=>{(0,_index.default)([String,Number])(true)}).toThrow()})});describe("check objects",()=>{const value={a:1,b:2};test("check with constructor",()=>{expect(()=>{(0,_index.default)({a:Number})(value)}).not.toThrow();expect(()=>{(0,_index.default)({a:Number,c:Number})(value)}).toThrow();expect(()=>{(0,_index.default)({a:Number,c:undefined})(value)}).not.toThrow()});test("keys on the schema are required",()=>{expect(()=>{(0,_index.default)({a:1})({a:1,b:2})}).not.toThrow();expect(()=>{(0,_index.default)({c:1})({a:1,b:2})}).toThrow()});test("check with primitives",()=>{expect(()=>{(0,_index.default)({a:2})(value)}).toThrow();expect(()=>{(0,_index.default)({a:1})(value)}).not.toThrow()});test("check with custom function",()=>{expect(()=>{(0,_index.default)({a:val=>val<0})(value)}).toThrow();expect(()=>{(0,_index.default)({a:val=>val>0})(value)}).not.toThrow()});test("check with custom function",()=>{let obj={x:"x",y:"x"};expect(()=>{(0,_index.default)({x:(val,rootObject)=>rootObject.y===val})(obj)}).not.toThrow();expect(()=>{(0,_index.default)({max:(val,rootObject)=>val>rootObject.min,min:(val,rootObject)=>val<rootObject.max})({max:1,min:-1})}).not.toThrow();expect(()=>{(0,_index.default)({max:(val,rootObject)=>val>rootObject.min,min:(val,rootObject)=>val<rootObject.max})({max:1,min:10})}).toThrow();expect(()=>{(0,_index.default)({"/./":(val,_,keyName)=>keyName===val})({x:"x",y:"y"})}).not.toThrow();expect(()=>{(0,_index.default)({"/./":(val,_,keyName)=>keyName===val})({x:"x",y:"x"})}).toThrow()});test("match key with regex",()=>{expect(()=>{(0,_index.default)({[/[a-z]/]:Number})(value)}).not.toThrow();expect(()=>{(0,_index.default)({[/[a-z]/]:0})(value)}).toThrow();expect(()=>{(0,_index.default)({[/[A-Z]/]:Number})(value)}).not.toThrow();expect(()=>{(0,_index.default)({[/[a-z]/]:Number,a:1})(value)}).not.toThrow();expect(()=>{(0,_index.default)({[/[a-z]/]:Number,a:2})(value)}).toThrow()})});describe("composable",()=>{test("isValidNumber",()=>{const isValidNumber=(0,_index.default)(Number);expect(()=>{isValidNumber(2)}).not.toThrow();expect(()=>{isValidNumber("2")}).toThrow()});test("isPositive",()=>{const isPositive=(0,_index.default)(v=>v>0);expect(()=>{isPositive(2)}).not.toThrow();expect(()=>{isPositive(-1)}).toThrow()})});describe("set on error to isValid",()=>{const isValid=(0,_index.setOnError)(()=>false);test("should return true if valid",()=>{expect(isValid(Number)(2)).toBe(true)});test("should return false if valid",()=>{expect(isValid(String)(2)).toBe(false)})});describe("set on error  to log error",()=>{beforeAll(()=>{global.console={error:jest.fn(),log:jest.fn()}});const checkOrLog=(0,_index.setOnError)(err=>console.error(err));test("should log error",()=>{checkOrLog(Number)(2);expect(global.console.error).not.toHaveBeenCalled()});test("should not log error",()=>{checkOrLog(String)(2);expect(global.console.error).toHaveBeenCalled()})});
//# sourceMappingURL=use.test.js.map