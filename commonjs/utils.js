"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.asDateString=exports.asDate=exports.asString=exports.asNumber=exports.size=exports.noExtraKeys=exports.objectOf=exports.arrayOf=exports.before=exports.after=exports.DateValid=exports.DateString=exports.insensitiveCase=exports.Uppercase=exports.Lowercase=exports.endsWith=exports.startsWith=exports.contains=exports.max=exports.min=exports.SafeNumber=exports.SafeInteger=exports.Negative=exports.Positive=exports.Finite=exports.Even=exports.Odd=exports.hasDecimals=exports.Numeric=exports.Integer=exports.between=exports.le=exports.lt=exports.ge=exports.gt=exports.and=exports.or=exports.not=exports.any=void 0;var _lib=require("./lib.js");var _helpers=require("./helpers.js");const addDisplayName=fn=>(...args)=>{let r=fn(...args);Object.defineProperty(r,"displayName",{value:`${fn.name.replace("_","")}(${args.map(_helpers.stringify)})`,writable:true,enumerable:false,configurable:false});return r};const any=()=>true;exports.any=any;any.displayName="any";const _not=(...args)=>val=>!(0,_lib.isValid)(...args)(val);const not=addDisplayName(_not);exports.not=not;const _or=(...args)=>args;const or=addDisplayName(_or);exports.or=or;const _and=(...args)=>(0,_lib.mustBe)(...args);const and=addDisplayName(_and);exports.and=and;const _gt=limit=>value=>value>limit;const gt=addDisplayName(_gt);exports.gt=gt;const _ge=limit=>value=>value>=limit;const ge=addDisplayName(_ge);exports.ge=ge;const _lt=limit=>value=>value<limit;const lt=addDisplayName(_lt);exports.lt=lt;const _le=limit=>value=>value<=limit;const le=addDisplayName(_le);exports.le=le;const _between=(min,max)=>and(ge(min),le(max));const between=addDisplayName(_between);exports.between=between;const Integer=and(Number,Number.isInteger);exports.Integer=Integer;const Numeric=and([Number,String,BigInt],num=>num==Number(num));exports.Numeric=Numeric;Numeric.displayName="Numeric";const hasDecimals=and(Numeric,num=>num!=Number.parseInt(String(num)));exports.hasDecimals=hasDecimals;hasDecimals.displayName="hasDecimals";const Odd=num=>Math.abs(Number(num)%2)===1;exports.Odd=Odd;Odd.displayName="Odd";const Even=num=>Math.abs(Number(num)%2)===0;exports.Even=Even;Even.displayName="Even";const Finite=and(Numeric,num=>Number.isFinite(Number(num)));exports.Finite=Finite;Finite.displayName="Finite";const Positive=and(Numeric,gt(0));exports.Positive=Positive;Positive.displayName="Positive";const Negative=and(Numeric,lt(0));exports.Negative=Negative;Negative.displayName="Negative";const SafeInteger=Number.isSafeInteger;exports.SafeInteger=SafeInteger;SafeInteger.displayName="SafeInteger";const SafeNumber=and(Numeric,between(Number.MIN_SAFE_INTEGER,Number.MAX_SAFE_INTEGER));exports.SafeNumber=SafeNumber;SafeNumber.displayName="SafeNumber";const min=ge;exports.min=min;const max=le;exports.max=max;const _contains=query=>new RegExp(query);const contains=addDisplayName(_contains);exports.contains=contains;const _startsWith=query=>value=>value.search(query)===0;const startsWith=addDisplayName(_startsWith);exports.startsWith=startsWith;const _endsWith=query=>value=>value.search(query)===value.length-query.length;const endsWith=addDisplayName(_endsWith);exports.endsWith=endsWith;const Lowercase=/^(([a-z\W\d]))+$/;exports.Lowercase=Lowercase;Lowercase.displayName="Lowercase";const Uppercase=/^(([A-Z\W\d]))+$/;exports.Uppercase=Uppercase;Uppercase.displayName="Uppercase";const _insensitiveCase=str=>new RegExp(str,"i");const insensitiveCase=addDisplayName(_insensitiveCase);exports.insensitiveCase=insensitiveCase;function isValidDate(d){return d instanceof Date&&!Number.isNaN(Date.parse(d))}const DateString=(0,_lib.mustBe)(String,string=>isValidDate(new Date(string)));exports.DateString=DateString;DateString.displayName="DateString";const DateValid=(0,_lib.mustBe)(Date,isValidDate);exports.DateValid=DateValid;DateValid.displayName="DateValid";const _after=min=>date=>new Date(date)>new Date(min);const after=addDisplayName(_after);exports.after=after;const _before=max=>date=>new Date(date)<new Date(max);const before=addDisplayName(_before);exports.before=before;const _arrayOf=type=>(0,_lib.isValid)(Array,{[/^\d$/]:type});const arrayOf=addDisplayName(_arrayOf);exports.arrayOf=arrayOf;const _objectOf=type=>(0,_lib.isValid)(Object,{[/./]:type});const objectOf=addDisplayName(_objectOf);exports.objectOf=objectOf;const _noExtraKeys=schema=>({...schema,[/./]:()=>false});const noExtraKeys=addDisplayName(_noExtraKeys);exports.noExtraKeys=noExtraKeys;const _size=number=>value=>{let size;if(typeof value==="string"||Array.isArray(value)){size="length"}if(value&&value.constructor===Set){size="size"}return value&&value[size]===number};const size=addDisplayName(_size);exports.size=size;const castToNumberIfPosible=(maybeNumber,error)=>{let number=Number(maybeNumber);if(number==maybeNumber)return number;else throw error};const asNumber=(0,_lib.mustBe)(Numeric,(0,_lib.mustBe)(Number).or(castToNumberIfPosible));exports.asNumber=asNumber;asNumber.displayName="asNumber";const asString=(0,_lib.mustBe)([BigInt,Number,String,Boolean,Date],(0,_lib.mustBe)(String).or(String));exports.asString=asString;asString.displayName="asString";const asDate=(0,_lib.mustBe)([DateValid,DateString],(0,_lib.mustBe)(Date).or(str=>new Date(str)));exports.asDate=asDate;asDate.displayName="asDate";const asDateString=(0,_lib.mustBe)([DateValid,DateString],(0,_lib.mustBe)(DateString).or(String));exports.asDateString=asDateString;asDateString.displayName="asDateString";