"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.isValidOrThrow=exports.isValidOrLog=exports.isValid=exports.setOnError=exports.isValidType=exports.checkShape=void 0;var _utils=require("./utils.js");const isOptionalKey=(key="")=>/[?$]$/.test(key);const isRequiredKey=key=>(0,_utils.notIsRegExp)(key)&&!isOptionalKey(key);const checkObject=(whatToDo,schema,object)=>{const requiredKeys=Object.keys(schema).filter(isRequiredKey);const optionalKeys=Object.keys(schema).filter(isOptionalKey);let areAllValid=optionalKeys.every(keyName=>{const keyNameStripped=keyName.replace(/[?$]$/,"");return whatToDo([undefined,schema[keyName]],object[keyNameStripped],object,keyNameStripped)});if(!areAllValid)return areAllValid;areAllValid=requiredKeys.every(keyName=>whatToDo(schema[keyName],object[keyName],object,keyName));if(!areAllValid)return areAllValid;const regexKeys=Object.keys(schema).filter(_utils.isRegExp);const untestedKeys=Object.keys(object).filter(key=>!requiredKeys.includes(key));areAllValid=regexKeys.every(regexpString=>untestedKeys.every(keyName=>{if((0,_utils.stringToRegExp)(regexpString).test(keyName)){return whatToDo(schema[regexpString],object[keyName],object,keyName)}return true}));return areAllValid};const checkShape=(types,props)=>checkObject(isValidType,types,props);exports.checkShape=checkShape;const whatKindIs=type=>{if((0,_utils.isType)(Object)(type))return"schema";if((0,_utils.isPrimitive)(type))return"primitive";if((0,_utils.isConstructor)(type))return"constructor";if((0,_utils.isCustomValidator)(type))return"function";if((0,_utils.isType)(Array)(type))return"enum";if((0,_utils.isType)(RegExp)(type))return"regex"};const isValidType=(type,value,rootValue,keyName)=>{const kind=whatKindIs(type);switch(kind){case"regex":return(0,_utils.checkRegExp)(type,value);case"primitive":return value===type;case"constructor":return(0,_utils.isType)(type)(value);case"enum":return type.some(_type=>isValidType(_type,value,rootValue,keyName));case"schema":return value&&checkShape(type,value);case"function":return type(value,rootValue,keyName);default:return false;}};exports.isValidType=isValidType;const throwOnError=err=>{if((0,_utils.isError)(err))throw err;throw new TypeError(err)};const check=error=>(...types)=>value=>{try{return types.every(type=>{const valid=isValidType(type,value);if(valid)return valid;throw`value ${(0,_utils.stringify)(value)} do not match type ${(0,_utils.stringify)(type)}`})}catch(err){return error(err)}};const setOnError=onError=>check(onError);exports.setOnError=setOnError;const isValid=setOnError(()=>false);exports.isValid=isValid;const isValidOrLog=setOnError(err=>{console.error(err);return false});exports.isValidOrLog=isValidOrLog;const isValidOrThrow=setOnError(throwOnError);exports.isValidOrThrow=isValidOrThrow;var _default=isValidOrThrow;exports.default=_default;
