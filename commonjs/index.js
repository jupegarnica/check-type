"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.isValidOrThrow=exports.isValidOrLog=exports.isValid=exports.setOnError=exports.isValidType=exports.checkShape=void 0;var _utils=require("./utils.js");const checkObject=(whatToDo,types,props)=>{const propsTypes=Object.keys(types).filter(_utils.notIsRegExp);let areAllValid=propsTypes.every(propName=>{return whatToDo(types[propName],props[propName],props,propName)});if(!areAllValid)return areAllValid;const regExpToCheck=Object.keys(types).filter(_utils.isRegExp);const untestedReceivedProps=Object.keys(props).filter(key=>!propsTypes.includes(key));areAllValid=regExpToCheck.every(regexpString=>untestedReceivedProps.every(propName=>{if((0,_utils.stringToRegExp)(regexpString).test(propName)){return whatToDo(types[regexpString],props[propName],props,propName)}return true}));return areAllValid};const checkShape=(types,props)=>checkObject(isValidType,types,props);exports.checkShape=checkShape;const whatKindIs=type=>{if((0,_utils.isType)(Object)(type))return"schema";if((0,_utils.isPrimitive)(type))return"primitive";if((0,_utils.isConstructor)(type))return"constructor";if((0,_utils.isNormalFunction)(type))return"function";if((0,_utils.isType)(Array)(type))return"enum";if((0,_utils.isType)(RegExp)(type))return"regex"};const isValidType=(type,value,rootValue,keyName)=>{const kind=whatKindIs(type);switch(kind){case"regex":return(0,_utils.checkRegExp)(type,value);case"primitive":return value===type;case"constructor":return(0,_utils.isType)(type)(value);case"enum":return type.some(_type=>isValidType(_type,value,rootValue,keyName));case"schema":return value&&checkShape(type,value);case"function":return type(value,rootValue,keyName);default:return false;}};exports.isValidType=isValidType;const throwOnError=err=>{if((0,_utils.isError)(err))throw err;throw new TypeError(err)};const check=error=>(...types)=>value=>{try{return types.every(type=>{const valid=isValidType(type,value);if(valid)return valid;throw`value ${(0,_utils.stringify)(value)} do not match type ${(0,_utils.stringify)(type)}`})}catch(err){return error(err)}};const setOnError=onError=>check(onError);exports.setOnError=setOnError;const isValid=setOnError(()=>false);exports.isValid=isValid;const isValidOrLog=setOnError(err=>{console.error(err);return false});exports.isValidOrLog=isValidOrLog;const isValidOrThrow=setOnError(throwOnError);exports.isValidOrThrow=isValidOrThrow;var _default=isValidOrThrow;exports.default=_default;